// Copyright The Go Authors.

#include <string_view>
#include <tuple>
#include <vector>

#include <catch2/catch.hpp>

#include "bongo/strconv.h"

using namespace std::string_view_literals;

namespace bongo::strconv {

TEST_CASE("Format integer", "[strconv]") {
  SECTION("int64") {
    auto test_cases = std::vector<std::tuple<int64_t, int, std::string_view>>{
      {0, 10, "0"},
      {1, 10, "1"},
      {-1, 10, "-1"},
      {12345678, 10, "12345678"},
      {-987654321, 10, "-987654321"},
      {2147483647, 10, "2147483647"},
      {-2147483647, 10, "-2147483647"},
      {2147483648, 10, "2147483648"},
      {-2147483648, 10, "-2147483648"},
      {2147483649, 10, "2147483649"},
      {-2147483649, 10, "-2147483649"},
      {4294967295, 10, "4294967295"},
      {-4294967295, 10, "-4294967295"},
      {4294967296, 10, "4294967296"},
      {-4294967296, 10, "-4294967296"},
      {4294967297, 10, "4294967297"},
      {-4294967297, 10, "-4294967297"},
      {1125899906842624, 10, "1125899906842624"},
      {9223372036854775807, 10, "9223372036854775807"},
      {-9223372036854775807, 10, "-9223372036854775807"},
      {-9223372036854775808ull, 10, "-9223372036854775808"},

      {0, 2, "0"},
      {10, 2, "1010"},
      {-1, 2, "-1"},
      {1 << 15, 2, "1000000000000000"},

      {-8, 8, "-10"},
      {057635436545, 8, "57635436545"},
      {1 << 24, 8, "100000000"},

      {16, 16, "10"},
      {-0x123456789abcdef, 16, "-123456789abcdef"},
      {9223372036854775807, 16, "7fffffffffffffff"},
      {9223372036854775807, 2, "111111111111111111111111111111111111111111111111111111111111111"},
      {-9223372036854775808ull, 2, "-1000000000000000000000000000000000000000000000000000000000000000"},

      {16, 17, "g"},
      {25, 25, "10"},
      {(((((17*35+24)*35+21)*35+34)*35+12)*35+24)*35ll + 32ll, 35, "holycow"},
      {(((((17*36+24)*36+21)*36+34)*36+12)*36+24)*36ll + 32ll, 36, "holycow"},
    };
    for (auto [in, base, exp] : test_cases) {
      CHECK(format(in, base) == exp);
    }
  }
  SECTION("uint64") {
    auto test_cases = std::vector<std::tuple<uint64_t, int, std::string_view>>{
      {9223372036854775807ull, 10, "9223372036854775807"},
      {9223372036854775808ull, 10, "9223372036854775808"},
      {9223372036854775809ull, 10, "9223372036854775809"},
      {18446744073709551614ull, 10, "18446744073709551614"},
      {18446744073709551615ull, 10, "18446744073709551615"},
      {18446744073709551615ull, 2, "1111111111111111111111111111111111111111111111111111111111111111"},
    };
    for (auto [in, base, exp] : test_cases) {
      CHECK(format(in, base) == exp);
    }
  }
  SECTION("Variable length uint64") {
    auto test_cases = std::vector<std::tuple<uint64_t, std::string_view>>{
      {1, "1"},
      {12, "12"},
      {123, "123"},
      {1234, "1234"},
      {12345, "12345"},
      {123456, "123456"},
      {1234567, "1234567"},
      {12345678, "12345678"},
      {123456789, "123456789"},
      {1234567890, "1234567890"},
      {12345678901, "12345678901"},
      {123456789012, "123456789012"},
      {1234567890123, "1234567890123"},
      {12345678901234, "12345678901234"},
      {123456789012345, "123456789012345"},
      {1234567890123456, "1234567890123456"},
      {12345678901234567, "12345678901234567"},
      {123456789012345678, "123456789012345678"},
      {1234567890123456789, "1234567890123456789"},
      {12345678901234567890ull, "12345678901234567890"},
    };
    for (auto [in, exp] : test_cases) {
      CAPTURE(in);
      CHECK(format(in) == exp);
    }
  }
}

}  // namespace bongo::strconv
